{
  "Narratives": {
    "/readme.md": [
      {
        "name": " hello world narrative",
        "type": "FS",
        "items": [
          {
            "type": "text",
            "content": "Hello World!"
          },
          {
            "type": "text",
            "content": "Thisisastoryallabouthow...."
          },
          {
            "type": "link",
            "content": {
              "id": "code link",
              "path": "/sort_algorithms/bubblesort.js"
            }
          },
          {
            "type": "link",
            "content": {
              "id": "bubble narrative",
              "path": "/fibonacci.js"
            }
          },
          {
            "type": "text",
            "content": " FIN "
          }
        ]
      }
    ],
    "/sort_algorithms/bubblesort.js": [
      {
        "name": "code link",
        "type": "FS",
        "items": [
          {
            "type": "text",
            "content": "A bubble sort program"
          },
          {
            "type": "text",
            "content": "Lets see it in action "
          },
          {
            "type": "link",
            "content": {
              "id": "codetest2",
              "path": "/sort_algorithms/bubblesort.js/Program"
            }
          }
        ]
      }
    ],
    "/sort_algorithms/bubblesort.js/Program": [
      {
        "name": "codetest2",
        "type": "Code",
        "narrativeHooks": {
          "/body/0/body/body/0": {
            "path": "/body/0/body/body/0",
            "items": [
              {
                "type": "text",
                "content": "Here we set the length"
              },
              {
                "type": "vcode",
                "content": "var barchart = new BarChart(values); \n display(barchart.domEl); "
              }
            ]
          },
          "/body/0/body/body/1/body/body/1/body/body/0/test": {
            "path": "/body/0/body/body/1/body/body/1/body/body/0/test",
            "items": [
              {
                "type": "text",
                "content": "Here it checks if it should swap these values"
              },
              {
                "type": "vcode",
                "content": "barchart.highlight([i,i+1],'grey');"
              }
            ]
          },
          "/body/0/body/body/1/body/body/1/body/body/0/consequent/body/3": {
            "path": "/body/0/body/body/1/body/body/1/body/body/0/consequent/body/3",
            "items": [
              {
                "type": "text",
                "content": " These should be swapped . So lets swap"
              },
              {
                "type": "vcode",
                "content": " barchart.highlight([i,i+1],'blue'); \n barchart.update(values);"
              }
            ]
          },
          "/": {
            "path": "/",
            "items": [
              {
                "type": "code",
                "content": "var  array = [];\nfor(var i = 0 ; i < 10 ; i++){\narray.push( Math.floor(Math.random() * 100) );\n}\nbubble_sort(array);"
              }
            ]
          }
        }
      }
    ],
    "/graham_scan.js/Program": [
      {
        "name": "New Narrative",
        "type": "Code",
        "narrativeHooks": {
          "/": {
            "path": "/",
            "items": [
              {
                "type": "vcode",
                "content": "var pc = new PointCloud([]);\n\ndisplay(pc.domEl);"
              },
              {
                "type": "code",
                "content": "var chull = new ConvexHullGrahamScan();\n\nfor(var i = 0 ; i < 10 ; i++){\n    chull.addPoint(\n        Math.floor((Math.random() * 450) - 225) ,\n        Math.floor((Math.random() * 260) - 120 ) \n        )\n}\nchull.getHull();"
              }
            ]
          },
          "/body/1/expression/right/properties/6/value/body/body/3/expression": {
            "path": "/body/1/expression/right/properties/6/value/body/body/3/expression",
            "items": [
              {
                "type": "text",
                "content": "points are [[ this.points ]]"
              }
            ]
          },
          "/body/1/expression/right/properties/3/value/body/body/0/test": {
            "path": "/body/1/expression/right/properties/3/value/body/body/0/test",
            "items": [
              {
                "type": "text",
                "content": "adding [[ x ]] , [[ y ]]"
              }
            ]
          },
          "/body/1/expression/right/properties/2/value/body/body/6/argument_Identifier": {
            "path": "/body/1/expression/right/properties/2/value/body/body/6/argument_Identifier",
            "items": [
              {
                "type": "vcode",
                "content": "pc.showConnection(a,b);\n"
              },
              {
                "type": "text",
                "content": "have an angle of [[ angle ]]"
              }
            ]
          },
          "/body/1/expression/right/properties/3/value/body/body/1": {
            "path": "/body/1/expression/right/properties/3/value/body/body/1",
            "items": [
              {
                "type": "vcode",
                "content": "pc.update(this.points);"
              }
            ]
          }
        }
      }
    ]
  },
  "VObjects": {
    "VArray": "function VArray(data, vertical) {\n\"use strict\";\n\n  var domEl = document.createElement('div');\n  var svg = d3.select(domEl).append('svg');\n  function update(newData) {\n    var boxSize = 20;\n    svg.selectAll('rect').data(newData).enter().append('svg:rect').attr('width', boxSize).attr('height', boxSize).attr('stroke', 'black').attr('fill', 'rgba(0,0,0,0)').attr('x', function (d, i) {\n      return boxSize * i;\n    });\n    svg.selectAll('text').data(newData).enter().append('svg:text').attr('x', function (d, i) {\n      return boxSize * i + 5;\n    }).attr('y', 15).attr('fill', 'black');\n    svg.selectAll('text').data(newData).text(function (d) {\n      return d;\n    });\n  }\n  update(data);\n  return {\n    domEl: domEl,\n    update: function (data) {\n      update(data);\n    }\n  };\n}",
    "BarChart": "function BarChart(data) {\n\"use strict\";\n\n  var domEl = document.createElement('div');\n  var chart = d3.select(domEl).append('svg');\n  var height = this.height, width = this.width;\n  var barWidth = width / data.length;\n  var yScale = d3.scale.linear().range([\n    height,\n    0\n  ]);\n  yScale.domain([\n    0,\n    d3.max(data)\n  ]);\n  var barGroup;\n  function update(newData) {\n    barGroup = chart.selectAll('g').data(newData);\n    var barGroupEnter = barGroup.enter().append('g');\n    barGroupEnter.attr('transform', function (d, i) {\n      return 'translate(' + barWidth * i + ',0)';\n    });\n    barGroupEnter.append('rect').attr('fill', 'green').attr('y', height).attr('height', function (d) {\n      return height - yScale(d);\n    }).attr('width', barWidth - 1);\n    barGroupEnter.append('text');\n    barGroup.select('rect').transition().attr('height', function (d) {\n      return height - yScale(d);\n    }).attr('y', function (d) {\n      return yScale(d);\n    });\n    barGroup.select('text').attr('y', function (d) {\n      return yScale(d) + 3;\n    }).attr('dy', '.75em').text(function (d) {\n      return '' + d;\n    });\n  }\n  update(data);\n  function highlight(toHighlight, color) {\n    barGroup.select('rect').attr('fill', function (d, i) {\n      return toHighlight.indexOf(i) > -1 ? color : 'green';\n    });\n  }\n  return {\n    domEl: domEl,\n    update: update,\n    highlight: highlight\n  };\n}",
    "List": "function List(data) {\n\"use strict\";\n\n  var domEl = document.createElement('div');\n  var svg = d3.select(domEl).append('svg');\n  function update(newData) {\n    var boxWidth = 100;\n    var boxHeight = 25;\n    svg.selectAll('rect').data(newData).enter().append('svg:rect').attr('width', boxWidth).attr('height', boxHeight).attr('stroke', 'black').attr('fill', 'rgba(0,0,0,0)').attr('y', function (d, i) {\n      return boxHeight * i;\n    });\n    svg.selectAll('text').data(newData).enter().append('svg:text').attr('y', function (d, i) {\n      return boxHeight * i + 15;\n    }).attr('x', 15).attr('fill', 'black');\n    svg.selectAll('text').data(newData).text(function (d) {\n      return d;\n    });\n  }\n  update(data);\n  return {\n    domEl: domEl,\n    update: update\n  };\n}",
    "PointCloud": "function PointCloud(data) {\n\"use strict\";\n   var c =  this.center;\n  var domEl = document.createElement('div');\n  var chart = d3.select(domEl).append('svg');\n  var height = this.height, width = this.width;\n    var connections = [] , points;\n\n  function getY(d,i){\n      return c.y+d.y\n  }\n  function getX(d,i){\n      return c.x+d.x;\n  }\n  var pointGroup;\n  function update(newData) {\n      points = newData;\n    pointGroup = chart.selectAll('g').data(newData);\n    var pointGroupEnter = pointGroup.enter().append('g');\n    pointGroupEnter.attr('transform', function (d, i) {\n        console.log(d);\n      return 'translate(' +  getX(d) + ','+ getY(d) +')';\n    })\n    pointGroupEnter.append('circle').attr('fill', 'green')\n    .attr('r', 4)\n    pointGroupEnter.append('text');\n    \n    pointGroup.select('text')\n    /*.attr('dy', '.75em').text(function (d) {\n      return '' + d.x + ':'+d.y;\n    });*/\n  }\n  update(data);\n  function highlight(toHighlight, color) {\n    pointGroup.select('circle').attr('fill', function (d, i) {\n      return toHighlight.indexOf(i) > -1 ? color : 'red';\n    });\n  }\n  \n  function showConnection(a,b){\n     chart.selectAll('line').remove();\n     chart.data([[a,b]]).append('line').attr('x1',function(d){\n        return getX( d[0] );\n    }).attr('y1',function(d){\n       return  getY( d[0] );\n    })\n    .attr('x2', function(d){\n        return getX( d[1]);\n    }).attr('y2',function(d){\n        return getY( d[1])\n    }).style('stroke-width','2px')\n    .style('stroke','black')\n      \n  \n  }\n  \n  return {\n    domEl: domEl,\n    update: update,\n    showConnection:showConnection,\n    highlight: highlight\n  };\n}",
    "Canvas": "function Canvas(centered) {\n\"use strict\";\n\n  var height = this.height, width = this.width;\n  \n  function reposition(p){\n        if(centered){\n            p.x += center.x;\n            p.y += center.y;\n        }\n    return p;\n  }\n\n  var dom = document.createElement('div');\n  var canvas = document.createElement('canvas');\n  dom.width = width;\n  dom.height = height;\n  dom.appendChild(canvas);\n  canvas.width = width;\n  canvas.height = height;\n  var center = {\n      'x': width / 2,\n      'y': height / 2\n    }\n  var ctx = canvas.getContext('2d');\n  var TAU = Math.PI *2;\n  \n  \n  function drawPoint(x,y,r,color){\n      var p  = reposition({x:x,y:y});\n      ctx.beginPath();\n      ctx.arc(p.x,p.y,r || 3, 0,TAU);\n      ctx.fill();\n      ctx.stroke();\n      ctx.closePath();\n      \n  }\n\n  ctx.domEl = dom;\n  ctx.drawPoint = drawPoint;\n  ctx.center = center;\n  \n  return ctx;\n}"
  }
}
